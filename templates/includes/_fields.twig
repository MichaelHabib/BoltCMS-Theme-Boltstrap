{# This file is essentially a copy of the _sub_fields.twig file found in the
    base-2016 theme. The only difference is in the way images are output;
    the previous method of popup(value, 1200, 0) would output images with a
    height attribute of 0 due to a bug in Bolt's backend code (and the images
    would also not be responsive)
#}

{# This file specifies the default output for the `fields()` tag. This file is
   split into three parts:
    - The first section initializes the variables and settings, both from the
      contenttype definitions as well as passed in variables.
    - The second section defines the macros that are used to output the desired
      fields in succession.
    - The last section is where the actual looping is done for the 'contenttype
      fields', 'repeater fields' and 'template fields' in turn.

    Read the relevant section in the documentation on usage of this
    functionality: https://docs.bolt.cm/master/fields-tag
#}

{# SECTION 1: INITIALIZATION #}

{# Set up the array of fieldnames that should be iterated. We do this by looping
   over _all_ the fields, and skipping those in the 'omittedkeys' array. #}
{% set omittedkeys = ['id', 'slug', 'datecreated', 'datechanged', 'datepublish', 'datedepublish', 'username', 'status', 'ownerid', 'templatefields'] %}

{# Skip over the fields that are used in the slug, unless explicitly told not to,
   using the `skip_uses` parameter. #}
{% if (record.contenttype.fields.slug.uses|default(null) is iterable) and (skip_uses == true) %}
    {% set omittedkeys = omittedkeys|merge(record.contenttype.fields.slug.uses) %}
{% endif %}

{# We also skip over the fields that are explicitly excluded. #}
{% if exclude is iterable %}
    {% set omittedkeys = omittedkeys|merge(exclude) %}
{% endif %}

{# SECTION 2: MACROS #}

{# If 'allowtwig' is true for this field, we'll need to parse it as
   Twig here. Note, that we're doing this inside a macro, so the
   snippet has a limited scope. No global variables, etc. #}
{% macro parsetextfield(key, value, contenttype) %}
    {% if contenttype.fields[key].allowtwig is defined and contenttype.fields[key].allowtwig == true %}
        {% set value = value|twig %}
    {% endif %}

    <div {% if key is not empty %}data-bolt-field="{{key}}"{% endif %}>{{ value|raw }}</div>
{% endmacro %}

{% macro imagelistfield(images) %}
    <div class="bolt-imagelist">
        {% for image in images %}
            <div class="bolt-imageholder">
                {{ popup(image.filename, 200, 0) }}
            </div>
        {% endfor %}
    </div>
{% endmacro %}

{# Macro for "basic" fields like HTML, Markdown, Textarea and Text #}
{% macro commonfields(key, value, fieldtype, contenttype) %}
    {% import _self as macro %}

    {# HTML, Textarea, Text fields #}
    {% if fieldtype in ['html', 'textarea', 'text'] %}
        {{ macro.parsetextfield(key, value, contenttype) }}
    {% endif %}

    {# Markdown fields #}
    {% if fieldtype == "markdown" %}
        {{ macro.parsetextfield(key, value|markdown, contenttype) }}
    {% endif %}

    {# Image fields #}
    {% if fieldtype == "image" and value.file is defined %}
        <img src="{{ image(value.file) }}" class="img-fluid" />
    {% endif %}

    {# Video fields #}
    {% if fieldtype == "video" and value.responsive is defined %}
        <div class="flex-video {{ value.ratio > 1.5 ? 'widescreen' }}">
            {{ value.responsive }}
        </div>
    {% endif %}

{% endmacro %}

{# Macro for other field types, like Geo, Select, Checkbox and others. #}
{% macro extendedfields(key, value, fieldtype) %}

    {# Geolocation field #}
    {% if fieldtype == "geolocation" and value.latitude is defined %}
        <img src="http://maps.googleapis.com/maps/api/staticmap?center={{ value.latitude }},{{ value.longitude }}&amp;zoom=14&amp;size=617x300&amp;sensor=false&amp;markers={{ value.latitude }},{{ value.longitude }}">
    {% endif %}

    {# Special case for 'select' fields: if it's a multiple select, the value is an array. #}
    {% if fieldtype == "select" and value is not empty %}
        <p><strong>{{ key }}: </strong>
            {{ value|join(", ") }}
        </p>
    {% endif %}

    {# Checkbox fields #}
    {% if fieldtype == "checkbox" %}
        <p>Checkbox {{ key }}: {{value ? "checked" : "not checked"}}</p>
    {% endif %}

    {# Imagelist fields #}
    {% if fieldtype == "imagelist" and value is not empty %}
        {{ macro.imagelistfield(value) }}
    {% endif %}

    {# No special case defined for this type of field. We just output them, if it's
       a simple scalar, and 'dump' them otherwise. #}
    {% if fieldtype in [ 'filelist', 'datetime', 'date', 'integer', 'float' ] and value is not empty  %}
        <p><strong>{{ key }}: </strong>
            {% if value is iterable %}
                {{ dump(value) }}
            {% else %}
                {{ value }}
            {% endif %}
        </p>
    {% endif %}

{% endmacro %}

{% import _self as macro %}

{# SECTION 3: LOOPING AND ITERATION #}

{# The actual looping is done here. #}
{% for key, value in record.values if (key not in omittedkeys) %}

    {# Fields that are considered 'common': 'html', 'markdown', 'textarea',
       'text', 'image', 'video' and 'imagelist' #}
    {% if common == true %}

        {% set fieldtype = record.fieldtype(key) %}
        {{ macro.commonfields(key, value, fieldtype, record.contenttype) }}

    {% endif %}

    {# The rest of the built-in fieldtypes #}
    {% if extended == true %}

        {% set fieldtype = record.fieldtype(key) %}
        {{ macro.extendedfields(key, value, fieldtype) }}

    {% endif %}

    {# Finally, the repeaters #}
    {% if repeaters == true and record.fieldtype(key) == "repeater" %}

        {% for repeater in value %}

            {% for repeaterfield in repeater %}

                {% set fieldtype = repeaterfield.getFieldtype() %}
                {% set value = repeaterfield.getValue() %}
                {{ macro.commonfields('', value, fieldtype, record.contenttype) }}
                {{ macro.extendedfields('', value, fieldtype) }}

            {% endfor %}

        {% endfor %}

    {% endif %}

{% endfor %}

{# We do the same for the templatefields, if set and not empty. #}
{% set templatefields = record.values.templatefields.values|default() %}
{% if templatefields is defined and templatefields is not empty %}

    {# Note: This needs to be expanded upon!! For better detection the 'virtual'
       contenttype for the templatefields should know about the types of fields. #}
    {% set templatefieldsfieldtypes = attribute(record.contenttype.templatefields|first, 'fields') %}

    {% for key, value in templatefields if (key not in omittedkeys) %}

        {% set fieldtype = attribute(attribute(templatefieldsfieldtypes, key), 'type')  %}
        {{ macro.commonfields(key, value, fieldtype, record.contenttype) }}
        {{ macro.extendedfields(key, value, fieldtype) }}

    {% endfor %}

{% endif %}
